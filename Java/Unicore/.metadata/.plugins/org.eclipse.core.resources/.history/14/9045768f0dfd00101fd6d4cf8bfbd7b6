package console;

import gui.console.Console;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import main.Base;
import console.commands.ChangeUsername;
import console.commands.EstConnection;
import console.commands.Help;
import console.commands.ShowPicture;
import console.commands.Test;

public class ConsoleHead {

	private final Map<String, ConsoleCommand> consoleCommands;
	
	private final Base base;
	
	private Console console;
	
	private String[] commandArgs = new String[10];
	
	
	private String prompt;
	
	public ConsoleHead(Base b) {
		base = b;
		//console = b.getConsoleGui();	// May be null at start
		consoleCommands = new HashMap<String, ConsoleCommand>();
		initMap();
		
		prompt = base.getUsername() +" ~ $ ";
	}
	
	private void initMap() {
		consoleCommands.put("est", new EstConnection(base)); //FALSCH!!
		consoleCommands.put("test", new Test(base));
		consoleCommands.put("showp", new ShowPicture(base));
		consoleCommands.put("helpc", new Help(base));
		consoleCommands.put("setu", new ChangeUsername(base));
	}
//	
//	public synchronized void exe(String[] consArgs) {
//		commandArgs = consArgs;
//		ConsoleCommand conscom = consoleCommands.get(commandArgs[0]);
//		
//		try {
//			Class.forName("ChangeUsername");
//		} catch (ClassNotFoundException e) {
//		}
//		
//		if(conscom!=null)
//			conscom.start();
//		else 
//			new dummy("Unknown Command").start();
//	}
	
	public synchronized void exe(String[] consArgs) {
		try {
			Class<?> c = Class.forName("console.commands.Test");
			ConsoleCommand cc = (ConsoleCommand) c.getConstructor(base.getClass()).newInstance(base);
			cc.start();
			
			//Class.forName("Ljava.lang.String")consArgs.getClass()
			
		} catch (ClassNotFoundException e) {
			new dummy("Unknown Command").start();
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void informExeEnd() {
		console.printAt(prompt, true);
	}
	public void changePrompt(String newPrompt) {
		if(newPrompt==null)
			prompt = base.getUsername() +prompt;
		else
			prompt = base.getUsername() +newPrompt;
	}
	
	public String[] getCommandArgs() {
		return commandArgs;
	}
	public Base getBase() {
		return base;
	}
	public void regGui(Console g) {
		console = g;
	}
	public String getPromptString() {
		return prompt;
	}
	public Map<String, ConsoleCommand> getCommands() {
		return Collections.unmodifiableMap(consoleCommands);
	}
	
	private class dummy extends Thread {
		String message;
		dummy(String mess) {
			super();
			message = mess;
		}
		public void run() {
			console.printAt(message +"\n" + prompt, true);
		}
	}
}
